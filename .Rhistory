install.packages(testthat)
install.packages('testthat')
install.packages('royxgen2')
install.packages('devtools')
library(devtools)
devtools::document()
devtools::test()
library(prettypublisher)
library(prettypublisher)
use_package("magittr")
install.packages('magittr')
use_package("magrittr")
use_package("stringr")
?format
?round
document()
library(prettypublisher)
?format
format(2.1, nsmall = 3)
format(2.1, nsmall = 3, justify = 'left')
library(prettypublisher)
document
document()
?pretty_round
create()
devtools::create()
?format
?str_trim
use_vignette("my-vignette")
library(prettypublisher)
pretty_round(2.1)
documents
documents()
library(prettypublisher)
devtools::document()
library(prettypublisher)
?pretty_round
x <- c(2, 2.35343, 5343.1, 23323.1212)
x %>% pretty_round
pretty_round(x)
?contect
?context
?pretty_round
#' @return A rounded numeric vector formatted as a character vector with trialing zeros.
expect_match(pretty_round(2.1, digits =2), '2.10')
library(testthat)
expect_match(pretty_round(2.1, digits = 2), '2.10')
expect_match(pretty_round(2.1, digits = 2), '2.100')
test_that("pretty_round adds trailing zeros as expected") {
expect_match(pretty_round(2.1, digits = 2), '2.10')
}
test_that("pretty_round adds trailing zeros as expected", {
expect_match(pretty_round(2.1, digits = 2), '2.10')
})
source('~/Dropbox/Personal/prettypublisher/tests/testthat/test-pretty_round.R', echo=TRUE)
test_that('pretty_round is correctly dealing with numeric vector inputs', {
vector <- c(1.33, 13123423.234124, 0.232342, 0.000492, 1.343)
char_vector <- as.character(c(1.33, 13123423.23, 0.23, 0.00, 1.34))
expect_equal(length(vector), length(pretty_round(vector)))
expect_match(char_vector, pretty_round(vector, digits = 2))
})
vector <- c(1.33, 13123423.234124, 0.232342, 0.000492, 1.343)
char_vector <- as.character(c(1.33, 13123423.23, 0.23, 0.00, 1.34))
length(pretty_round(vector))
length(vector)
expect_equal(length(vector), length(pretty_round(vector)))
pretty_round(vector, digits = 2)
expect_match(char_vector, pretty_round(vector, digits = 2))
?expect_length
char_vector <- as.character(c(1.33, 13123423.23, 0.23, 0.00, 1.34))
expect_length(1:10, 10)
expect_length(pretty_round(vector), length(vector))
expect_length(pretty_round(vector), vector)
?expect_match
expect_equal(char_vector, pretty_round(vector, digits = 2))
char_vector
char_vector <- as.character(c(1.33, 13123423.23, 0.23, 0.00, 1.34))
char_vector
?expect_equal
expect_equal(char_vector, pretty_round(vector, digits = 2))
char_vector <- c('1.33', '13123423.23', '0.23', '0.00', '1.34')
expect_equal(char_vector, pretty_round(vector, digits = 2))
source('~/Dropbox/Personal/prettypublisher/tests/testthat/test-pretty_round.R', echo=TRUE)
library(prettypublisher)
pretty_round
pretty_percentage = function(num, denom, digits = 2, percent_scaling = 100) {
per <- pretty_round(num/denom * percent_scaling, digits)
per_as_char <- paste0(per, '% (', num, '/', denom, ')')
return(per_as_char)
}
pretty_percentage(10, 100)
pretty_percentage(10, 100, digits = 0)
?lintr
library(lintr)
library('lintr')
install.packages('lintr')
library(lintr)
library(devtools )
devtools::lint_package()
lint_package()
lint_package()
pretty_percentage <- function(num, denom, digits = 2, percent_scaling = 100) {
per <- pretty_round(num / denom * percent_scaling, digits)
per_as_char <- paste0(per,"% (", num,"/", denom,")")
return(per_as_char)
}
lint_package()
lint_package()
pretty_percentage <- function(num, denom, digits = 2, percent_scaling = 100) {
per <- pretty_round(num / denom * percent_scaling, digits)
per_as_char <- paste0(per, "% (", num, "/", denom, ")")
return(per_as_char)
}
pretty_percentage(10, 130)
?str_trim
?pretty_round
?str_trim
lint_package()
document
document()
?pretty_percentage
document(())
document()
?pretty_percentage
document
document()
?pretty_percentage
pretty_percentage <- function(num, denom, digits = 2, percent_scaling = 100, ...) {
per <- pretty_round(num / denom * percent_scaling, digits, as_per = TRUE ...)
if (as_per) {
per_delim <- "% ("
} else {
per_delim <- " ("
}
per_as_char <- paste0(per, per_delim, num, "/", denom, ")")
return(per_as_char)
}
#' ## Return a proportion
pretty_percentage <- function(num, denom, digits = 2, percent_scaling = 100, as_per = TRUE, ...) {
per <- pretty_round(num / denom * percent_scaling, digits, ...)
if (as_per) {
per_delim <- "% ("
} else {
per_delim <- " ("
}
per_as_char <- paste0(per, per_delim, num, "/", denom, ")")
return(per_as_char)
}
pretty_percentage(c(1,4,6, 19), 100, digits = 1)
pretty_percentage(10, 500)
pretty_percentage(c(1, 2, 4, 5, 2), c(100, 40, 50, 40, 30), per_delim = FALSE)
pretty_percentage <- function(num, denom, digits = 2, percent_scaling = 100, as_per = TRUE, ...) {
per <- pretty_round(num / denom * percent_scaling, digits, ...)
if (as_per) {
per_delim <- "% ("
} else {
per_delim <- " ("
}
per_as_char <- paste0(per, per_delim, num, "/", denom, ")")
return(per_as_char)
}
pretty_percentage(c(1, 2, 4, 5, 2), c(100, 40, 50, 40, 30), as_per = FALSE)
source('~/Dropbox/Personal/prettypublisher/R/pretty_percentage.R', echo=TRUE)
library(prettypublisher)
document()
?pretty_percentage
document
document()
document()
?pretty_percentage
library(prettypublisher)
lint_package()
source('~/Dropbox/Personal/prettypublisher/R/pretty_percentage.R', echo=TRUE)
